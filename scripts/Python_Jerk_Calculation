def calculate_motion_metrics(x, y):
    # Convert the x and y sequences into a DataFrame
    df = pd.DataFrame({'x': x, 'y': y})

    # Find the row index before the first change in either x or y
    first_change_index = None
    for i in range(1, len(df)):
        if df['x'][i] != df['x'][i - 1] or df['y'][i] != df['y'][i - 1]:
            first_change_index = i - 1
            break

    # If a change point is found, slice the data starting from the row before the change point
    if first_change_index is not None:
        df = df[first_change_index:]
        df = df.reset_index(drop=True)

    # Calculate the displacements in the x and y directions
    displacement_x = df['x'].diff()
    displacement_y = df['y'].diff()

    # Calculate the magnitude of the displacement between two points
    displacement = np.sqrt(displacement_x ** 2 + displacement_y ** 2)
    df['displacement'] = displacement

    # Define a general function to calculate velocity, acceleration, and jerk
    def calculate_derivative(series):
        result = []
        for i in range(1, len(series) - 1):
            value = (series[i] - series[i - 1] + series[i + 1] - series[i]) / 2
            result.append(value)
        result = [np.nan] + result + [np.nan]
        return result

    # Calculate the velocity, acceleration, and jerk in the x direction
    speed_x = calculate_derivative(df["x"])
    df['speed_x'] = speed_x
    acceleration_x = calculate_derivative(speed_x)
    df['acceleration_x'] = acceleration_x
    jerk_x = calculate_derivative(acceleration_x)
    df['jerk_x'] = jerk_x

    # Calculate the velocity, acceleration, and jerk in the y direction
    speed_y = calculate_derivative(df["y"])
    df['speed_y'] = speed_y
    acceleration_y = calculate_derivative(speed_y)
    df['acceleration_y'] = acceleration_y
    jerk_y = calculate_derivative(acceleration_y)
    df['jerk_y'] = jerk_y

    df = df[~df['jerk_y'].isna()]

    return df

def calculate_jerk(df):
    jerk_x = df['jerk_x']
    jerk_y = df['jerk_y']
    
    # Calculate the sum of squares of jerk
    jerk_x_squared_sum = np.sum(jerk_x ** 2)
    jerk_y_squared_sum = np.sum(jerk_y ** 2)
    jerk_squared_sum = jerk_x_squared_sum + jerk_y_squared_sum

    # Travels Distances
    valid_displacement = df["displacement"]
    displacement_squared_sum = np.sum(valid_displacement)

    # Time Spent
    x_length = len(df['x'])

    # Calculate the normalized jerk
    jerk = np.sqrt(0.5 * jerk_squared_sum * (x_length ** 5) / (displacement_squared_sum) ** 2)

    return jerk


def calculate_jerk_x(df):
    jerk_x = df['jerk_x']

    # Calculate the sum of squares of jerk
    jerk_x_squared_sum = np.sum(jerk_x ** 2)
    jerk_squared_sum = jerk_x_squared_sum

    # Travels Distances
    valid_displacement = df["displacement"]
    displacement_squared_sum = np.sum(valid_displacement)

    # Time Spent
    x_length = len(df['x'])

    # Calculate the normalized jerk
    jerk = np.sqrt(0.5 * jerk_squared_sum * (x_length ** 5) / (displacement_squared_sum) ** 2)

    return jerk

def calculate_jerk_y(df):
    jerk_y = df['jerk_y']
    
    # Calculate the sum of squares of jerk
    jerk_y_squared_sum = np.sum(jerk_y ** 2)
    jerk_squared_sum = jerk_y_squared_sum

    # Travels Distances
    valid_displacement = df["displacement"]
    displacement_squared_sum = np.sum(valid_displacement)

    # Time Spent
    x_length = len(df['x'])

    # Calculate the normalized jerk
    jerk = np.sqrt(0.5 * jerk_squared_sum * (x_length ** 5) / (displacement_squared_sum) ** 2)

    return jerk
    
